// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20230921034005_PaymentProvider")]
    partial class PaymentProvider
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.DBModels.AccountModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Country")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_FavouriteTeam")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Nationality")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Season")
                        .HasColumnType("int");

                    b.Property<int>("Fk_User")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowAds")
                        .HasColumnType("bit");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Country");

                    b.HasIndex("Fk_FavouriteTeam");

                    b.HasIndex("Fk_Nationality");

                    b.HasIndex("Fk_Season");

                    b.HasIndex("Fk_User")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Entities.DBModels.AccountModels.AccountSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Account")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_PromoCode")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Season")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Subscription")
                        .HasColumnType("int");

                    b.Property<bool>("IsAction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Order_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Account");

                    b.HasIndex("Fk_PromoCode");

                    b.HasIndex("Fk_Season");

                    b.HasIndex("Fk_Subscription");

                    b.ToTable("AccountSubscriptions");
                });

            modelBuilder.Entity("Entities.DBModels.AccountModels.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Account")
                        .HasColumnType("int");

                    b.Property<string>("PaymentProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Account");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BenchBoost")
                        .HasColumnType("int");

                    b.Property<string>("CommunicationStatusComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CountryRanking")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CountryRankingUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoubleGameWeak")
                        .HasColumnType("int");

                    b.Property<double>("FavouriteTeamRanking")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FavouriteTeamRankingUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fk_Account")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_CommunicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("Fk_FavouriteTeam")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Season")
                        .HasColumnType("int");

                    b.Property<int>("FreeHit")
                        .HasColumnType("int");

                    b.Property<int>("FreeTransfer")
                        .HasColumnType("int");

                    b.Property<double>("GlobalRanking")
                        .HasColumnType("float");

                    b.Property<DateTime?>("GlobalRankingUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("GoldSubscriptionRanking")
                        .HasColumnType("float");

                    b.Property<DateTime?>("GoldSubscriptionUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVip")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Top_11")
                        .HasColumnType("int");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("TripleCaptain")
                        .HasColumnType("int");

                    b.Property<int>("TwiceCaptain")
                        .HasColumnType("int");

                    b.Property<double?>("UnSubscriptionRanking")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UnSubscriptionUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WildCard")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_CommunicationStatus");

                    b.HasIndex("Fk_FavouriteTeam");

                    b.HasIndex("Fk_Season");

                    b.HasIndex("Fk_Account", "Fk_Season")
                        .IsUnique();

                    b.ToTable("AccountTeams");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeamGameWeak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BenchBoost")
                        .HasColumnType("bit");

                    b.Property<int>("BenchPoints")
                        .HasColumnType("int");

                    b.Property<double>("CountryRanking")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CountryRankingUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DoubleGameWeak")
                        .HasColumnType("bit");

                    b.Property<double>("FavouriteTeamRanking")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FavouriteTeamRankingUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fk_AccountTeam")
                        .HasColumnType("int");

                    b.Property<int>("Fk_GameWeak")
                        .HasColumnType("int");

                    b.Property<bool>("FreeHit")
                        .HasColumnType("bit");

                    b.Property<double>("GlobalRanking")
                        .HasColumnType("float");

                    b.Property<DateTime?>("GlobalRankingUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrevPoints")
                        .HasColumnType("int");

                    b.Property<double>("SeasonGlobalRanking")
                        .HasColumnType("float");

                    b.Property<double?>("SeasonGoldSubscriptionRanking")
                        .HasColumnType("float");

                    b.Property<double>("SeasonTotalPoints")
                        .HasColumnType("float");

                    b.Property<double?>("SeasonUnSubscriptionRanking")
                        .HasColumnType("float");

                    b.Property<int>("TansfarePoints")
                        .HasColumnType("int");

                    b.Property<bool>("Top_11")
                        .HasColumnType("bit");

                    b.Property<int?>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<bool>("TripleCaptain")
                        .HasColumnType("bit");

                    b.Property<bool>("TwiceCaptain")
                        .HasColumnType("bit");

                    b.Property<bool>("WildCard")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Fk_GameWeak");

                    b.HasIndex("Fk_AccountTeam", "Fk_GameWeak")
                        .IsUnique();

                    b.ToTable("AccountTeamGameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeamPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_AccountTeam")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Player")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_AccountTeam");

                    b.HasIndex("Fk_Player", "Fk_AccountTeam")
                        .IsUnique();

                    b.ToTable("AccountTeamPlayers");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeamPlayerGameWeak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_AccountTeamPlayer")
                        .HasColumnType("int");

                    b.Property<int>("Fk_GameWeak")
                        .HasColumnType("int");

                    b.Property<int>("Fk_TeamPlayerType")
                        .HasColumnType("int");

                    b.Property<bool>("HavePoints")
                        .HasColumnType("bit");

                    b.Property<bool>("HavePointsInTotal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransfer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_AccountTeamPlayer");

                    b.HasIndex("Fk_TeamPlayerType");

                    b.HasIndex("Fk_GameWeak", "Fk_TeamPlayerType", "Fk_AccountTeamPlayer")
                        .IsUnique();

                    b.ToTable("AccountTeamPlayerGameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.CommunicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CommunicationStatuses");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.TeamPlayerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TeamPlayerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Captian"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ViceCaptian"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Normal"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.TeamPlayerTypeLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("TeamPlayerTypeLang");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 1,
                            Name = "Captian"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 2,
                            Name = "ViceCaptian"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 3,
                            Name = "Normal"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.AppInfoModels.AppAbout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prizes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionsAndAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInvite")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPayment")
                        .HasColumnType("bit");

                    b.Property<string>("SnapChatUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subscriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelegramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TiktokUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppAbout");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShowInvite = false,
                            ShowPayment = false
                        });
                });

            modelBuilder.Entity("Entities.DBModels.AppInfoModels.AppAboutLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("GameRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prizes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionsAndAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subscriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("AppAboutLang");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 1
                        });
                });

            modelBuilder.Entity("Entities.DBModels.AuditModels.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Entities.DBModels.AuditModels.JobAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Arguments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HangfireJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyJobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MyJobId")
                        .IsUnique();

                    b.ToTable("JobAudits");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.AdministrationRolePremission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_DashboardAccessLevel")
                        .HasColumnType("int");

                    b.Property<int>("Fk_DashboardAdministrationRole")
                        .HasColumnType("int");

                    b.Property<int>("Fk_DashboardView")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_DashboardAccessLevel");

                    b.HasIndex("Fk_DashboardView");

                    b.HasIndex("Fk_DashboardAdministrationRole", "Fk_DashboardView")
                        .IsUnique();

                    b.ToTable("AdministrationRolePremissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 8
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 9
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 10
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 11
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 12
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 13
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 14
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 15
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 16
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 17
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 18
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 19
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 20
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 21
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 22
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 23
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 24
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 25
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 26
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 27
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 28
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 29
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 30
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 31
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 32
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 33
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 34
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 35
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 36
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 38
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 39
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 40
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 41
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 42
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 43
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 44
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 45
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 46
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 47
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 48
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAccessLevel = 1,
                            Fk_DashboardAdministrationRole = 1,
                            Fk_DashboardView = 49
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CreateAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("DeleteAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("EditAccess")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ViewAccess")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DashboardAccessLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAccess = true,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeleteAccess = true,
                            EditAccess = true,
                            Name = "FullAccess",
                            ViewAccess = true
                        },
                        new
                        {
                            Id = 2,
                            CreateAccess = true,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeleteAccess = false,
                            EditAccess = true,
                            Name = "DataControl",
                            ViewAccess = true
                        },
                        new
                        {
                            Id = 3,
                            CreateAccess = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeleteAccess = false,
                            EditAccess = false,
                            Name = "Viewer",
                            ViewAccess = true
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevelLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("DashboardAccessLevelLang");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 1,
                            Name = "FullAccess"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 2,
                            Name = "DataControl"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 3,
                            Name = "Viewer"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DashboardAdministrationRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRoleLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("DashboardAdministrationRoleLang");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 1,
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanDeploy")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_DashboardAdministrationRole")
                        .HasColumnType("int");

                    b.Property<int>("Fk_User")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_DashboardAdministrationRole");

                    b.HasIndex("Fk_User")
                        .IsUnique();

                    b.ToTable("DashboardAdministrators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanDeploy = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_DashboardAdministrationRole = 1,
                            Fk_User = 1,
                            JobTitle = "Developer",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ViewPath")
                        .IsUnique();

                    b.ToTable("DashboardViews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Home",
                            ViewPath = "Home"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User",
                            ViewPath = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardAdministrator",
                            ViewPath = "DashboardAdministrator"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardAccessLevel",
                            ViewPath = "DashboardAccessLevel"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardAdministrationRole",
                            ViewPath = "DashboardAdministrationRole"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardView",
                            ViewPath = "DashboardView"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RefreshToken",
                            ViewPath = "RefreshToken"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserDevice",
                            ViewPath = "UserDevice"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Verification",
                            ViewPath = "Verification"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Account",
                            ViewPath = "Account"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Country",
                            ViewPath = "Country"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DBLogs",
                            ViewPath = "DBLogs"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppAbout",
                            ViewPath = "AppAbout"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Team",
                            ViewPath = "Team"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "News",
                            ViewPath = "News"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NewsAttachment",
                            ViewPath = "NewsAttachment"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sponsor",
                            ViewPath = "Sponsor"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PlayerPosition",
                            ViewPath = "PlayerPosition"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player",
                            ViewPath = "Player"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PrivateLeague",
                            ViewPath = "PrivateLeague"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PrivateLeagueMember",
                            ViewPath = "PrivateLeagueMember"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ScoreType",
                            ViewPath = "ScoreType"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TeamPlayerType",
                            ViewPath = "TeamPlayerType"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PlayerGameWeak",
                            ViewPath = "PlayerGameWeak"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PlayerGameWeakScore",
                            ViewPath = "PlayerGameWeakScore"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Season",
                            ViewPath = "Season"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GameWeak",
                            ViewPath = "GameWeak"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TeamGameWeak",
                            ViewPath = "TeamGameWeak"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Standings",
                            ViewPath = "Standings"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountTeam",
                            ViewPath = "AccountTeam"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Subscription",
                            ViewPath = "Subscription"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ScoreState",
                            ViewPath = "ScoreState"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PlayerGameWeakScoreState",
                            ViewPath = "PlayerGameWeakScoreState"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PlayerSeasonScoreState",
                            ViewPath = "PlayerSeasonScoreState"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountSubscription",
                            ViewPath = "AccountSubscription"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Payment",
                            ViewPath = "Payment"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountTeamPlayer",
                            ViewPath = "AccountTeamPlayer"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountTeamGameWeak",
                            ViewPath = "AccountTeamGameWeak"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Notification",
                            ViewPath = "Notification"
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mark",
                            ViewPath = "Mark"
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PlayerMark",
                            ViewPath = "PlayerMark"
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PromoCode",
                            ViewPath = "PromoCode"
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StatisticScore",
                            ViewPath = "StatisticScore"
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StatisticCategory",
                            ViewPath = "StatisticCategory"
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MatchStatisticScore",
                            ViewPath = "MatchStatisticScore"
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FormationPosition",
                            ViewPath = "FormationPosition"
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PlayerTransfer",
                            ViewPath = "PlayerTransfer"
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CommunicationStatus",
                            ViewPath = "CommunicationStatus"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardViewLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("DashboardViewLang");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 1,
                            Name = "Home"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 3,
                            Name = "DashboardAdministrator"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 4,
                            Name = "DashboardAccessLevel"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 5,
                            Name = "DashboardAdministrationRole"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 6,
                            Name = "DashboardView"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 7,
                            Name = "RefreshToken"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 8,
                            Name = "UserDevice"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 9,
                            Name = "Verification"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 10,
                            Name = "Account"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 11,
                            Name = "Country"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 12,
                            Name = "DBLogs"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 13,
                            Name = "AppAbout"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 14,
                            Name = "Team"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 15,
                            Name = "News"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 16,
                            Name = "NewsAttachment"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 17,
                            Name = "Sponsor"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 18,
                            Name = "PlayerPosition"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 19,
                            Name = "Player"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 20,
                            Name = "PrivateLeague"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 21,
                            Name = "PrivateLeagueMember"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 22,
                            Name = "ScoreType"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 23,
                            Name = "TeamPlayerType"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 24,
                            Name = "PlayerGameWeak"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 25,
                            Name = "PlayerGameWeakScore"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 26,
                            Name = "Season"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 27,
                            Name = "GameWeak"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 28,
                            Name = "TeamGameWeak"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 29,
                            Name = "Standings"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 30,
                            Name = "AccountTeam"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 31,
                            Name = "Subscription"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 32,
                            Name = "ScoreState"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 33,
                            Name = "PlayerGameWeakScoreState"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 34,
                            Name = "PlayerSeasonScoreState"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 35,
                            Name = "AccountSubscription"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 36,
                            Name = "Payment"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 38,
                            Name = "AccountTeamPlayer"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 39,
                            Name = "AccountTeamGameWeak"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 40,
                            Name = "Notification"
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 41,
                            Name = "Mark"
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 42,
                            Name = "PlayerMark"
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 43,
                            Name = "PromoCode"
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 44,
                            Name = "StatisticScore"
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 45,
                            Name = "StatisticCategory"
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 46,
                            Name = "MatchStatisticScore"
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 47,
                            Name = "FormationPosition"
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 48,
                            Name = "PlayerTransfer"
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 49,
                            Name = "CommunicationStatus"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.LocationModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Entities.DBModels.LocationModels.CountryLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("CountryLang");
                });

            modelBuilder.Entity("Entities.DBModels.LogModels.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.MatchStatisticScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_StatisticScore")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Team")
                        .HasColumnType("int");

                    b.Property<int>("Fk_TeamGameWeak")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanNotEdit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ValuePercentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Fk_StatisticScore");

                    b.HasIndex("Fk_Team");

                    b.HasIndex("Fk_TeamGameWeak");

                    b.ToTable("MatchStatisticScores");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.StatisticCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_365_Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StatisticCategories");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.StatisticCategoryLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("StatisticCategoryLang");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.StatisticScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_StatisticCategory")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_365_Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_StatisticCategory");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StatisticScores");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.StatisticScoreLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("StatisticScoreLang");
                });

            modelBuilder.Entity("Entities.DBModels.NewsModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fk_GameWeak")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_Season")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewsTypeEnum")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_GameWeak");

                    b.HasIndex("Fk_Season");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Entities.DBModels.NewsModels.NewsAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<double>("FileLength")
                        .HasColumnType("float");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_News")
                        .HasColumnType("int");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_News");

                    b.ToTable("NewsAttachments");
                });

            modelBuilder.Entity("Entities.DBModels.NewsModels.NewsLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("NewsLang");
                });

            modelBuilder.Entity("Entities.DBModels.NotificationModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenType")
                        .HasColumnType("int");

                    b.Property<string>("OpenValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.DBModels.NotificationModels.NotificationLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("NotificationLang");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.MarkLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("MarkLang");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fk_Mark")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Player")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<int?>("Used")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Mark");

                    b.HasIndex("Fk_Player");

                    b.ToTable("PlayerMarks");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMarkGameWeak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_GameWeak")
                        .HasColumnType("int");

                    b.Property<int>("Fk_PlayerMark")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_GameWeak");

                    b.HasIndex("Fk_PlayerMark");

                    b.ToTable("PlayerMarkGameWeeks");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMarkGameWeakScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_PlayerGameWeakScore")
                        .HasColumnType("int");

                    b.Property<int>("Fk_PlayerMark")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_PlayerGameWeakScore");

                    b.HasIndex("Fk_PlayerMark");

                    b.ToTable("PlayerMarkGameWeakScores");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMarkReasonMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_PlayerMark")
                        .HasColumnType("int");

                    b.Property<int>("Fk_TeamGameWeak")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_PlayerMark");

                    b.HasIndex("Fk_TeamGameWeak");

                    b.ToTable("PlayerMarkReasonMatch");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMarkTeamGameWeak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_PlayerMark")
                        .HasColumnType("int");

                    b.Property<int>("Fk_TeamGameWeak")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_PlayerMark");

                    b.HasIndex("Fk_TeamGameWeak");

                    b.ToTable("PlayerMarkTeamGameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.PlayerGameWeak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Player")
                        .HasColumnType("int");

                    b.Property<int>("Fk_TeamGameWeak")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanNotEdit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Ranking")
                        .HasColumnType("float");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<string>("_365_PlayerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Player");

                    b.HasIndex("Fk_TeamGameWeak", "Fk_Player")
                        .IsUnique();

                    b.ToTable("PlayerGameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.PlayerGameWeakScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinalValue")
                        .HasColumnType("int");

                    b.Property<int>("Fk_PlayerGameWeak")
                        .HasColumnType("int");

                    b.Property<int>("Fk_ScoreType")
                        .HasColumnType("int");

                    b.Property<double>("GameTime")
                        .HasColumnType("float");

                    b.Property<bool>("IsCanNotEdit")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_ScoreType");

                    b.HasIndex("Fk_PlayerGameWeak", "Fk_ScoreType")
                        .IsUnique();

                    b.ToTable("PlayerGameWeakScores");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.ScoreType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HavePoints")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanNotEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEvent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_365_EventTypeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_365_TypeId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ScoreTypes");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.ScoreTypeLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("ScoreTypeLang");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerStateModels.PlayerGameWeakScoreState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_GameWeak")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Player")
                        .HasColumnType("int");

                    b.Property<int>("Fk_ScoreState")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.Property<double>("Points")
                        .HasColumnType("float");

                    b.Property<int?>("Top15")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Fk_GameWeak");

                    b.HasIndex("Fk_ScoreState");

                    b.HasIndex("Fk_Player", "Fk_GameWeak", "Fk_ScoreState")
                        .IsUnique();

                    b.ToTable("PlayerGameWeakScoreStates");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerStateModels.PlayerSeasonScoreState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Player")
                        .HasColumnType("int");

                    b.Property<int>("Fk_ScoreState")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Season")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.Property<double>("Points")
                        .HasColumnType("float");

                    b.Property<int?>("Top15")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Fk_ScoreState");

                    b.HasIndex("Fk_Season");

                    b.HasIndex("Fk_Player", "Fk_Season", "Fk_ScoreState")
                        .IsUnique();

                    b.ToTable("PlayerSeasonScoreStates");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerStateModels.ScoreState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ScoreStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Total"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CleanSheet"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Goals"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Assists"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GoalkeeperSaves"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PenaltiesSaved"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "YellowCard"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RedCard"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BuyingPrice"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SellingPrice"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BuyingCount"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SellingCount"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PlayerSelection"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PlayerCaptain"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.PlayerStateModels.ScoreStateLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("ScoreStateLang");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 1,
                            Name = "Total"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 2,
                            Name = "CleanSheet"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 3,
                            Name = "Goals"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 4,
                            Name = "Assists"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 5,
                            Name = "GoalkeeperSaves"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 6,
                            Name = "PenaltiesSaved"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 7,
                            Name = "YellowCard"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 8,
                            Name = "RedCard"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 9,
                            Name = "BuyingPrice"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 10,
                            Name = "SellingPrice"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 11,
                            Name = "BuyingCount"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 12,
                            Name = "SellingCount"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 13,
                            Name = "PlayerSelection"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fk_Source = 14,
                            Name = "PlayerCaptain"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.PlayersTransfersModels.PlayerTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_AccountTeam")
                        .HasColumnType("int");

                    b.Property<int>("Fk_GameWeak")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Player")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferTypeEnum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_AccountTeam");

                    b.HasIndex("Fk_GameWeak");

                    b.HasIndex("Fk_Player");

                    b.ToTable("PlayerTransfers");
                });

            modelBuilder.Entity("Entities.DBModels.PrivateLeagueModels.PrivateLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fk_GameWeak")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_GameWeak");

                    b.HasIndex("UniqueCode")
                        .IsUnique();

                    b.ToTable("PrivateLeagues");
                });

            modelBuilder.Entity("Entities.DBModels.PrivateLeagueModels.PrivateLeagueMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Account")
                        .HasColumnType("int");

                    b.Property<int>("Fk_PrivateLeague")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<double>("Ranking")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Fk_PrivateLeague");

                    b.HasIndex("Fk_Account", "Fk_PrivateLeague")
                        .IsUnique();

                    b.ToTable("PrivateLeagueMembers");
                });

            modelBuilder.Entity("Entities.DBModels.PromoCodeModels.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxDiscount")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUse")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUsePerUser")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("Entities.DBModels.PromoCodeModels.PromoCodeLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("PromoCodeLang");
                });

            modelBuilder.Entity("Entities.DBModels.PromoCodeModels.PromoCodeSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_PromoCode")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Subscription")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_PromoCode");

                    b.HasIndex("Fk_Subscription");

                    b.ToTable("PromoCodeSubscriptions");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.GameWeak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTimeJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Season")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNext")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrev")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_365_GameWeakId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_365_GameWeakIdValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Season", "Name")
                        .IsUnique();

                    b.ToTable("GameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.GameWeakLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("GameWeakLang");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_365_CompetitionsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_365_SeasonId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.SeasonLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("SeasonLang");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.TeamGameWeak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNotificationJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Away")
                        .HasColumnType("int");

                    b.Property<int>("Fk_GameWeak")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Home")
                        .HasColumnType("int");

                    b.Property<bool>("HalfTimeEnded")
                        .HasColumnType("bit");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanNotEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelayed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondNotificationJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThirdJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdNotificationJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_365_MatchId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Away");

                    b.HasIndex("Fk_GameWeak");

                    b.HasIndex("Fk_Home");

                    b.ToTable("TeamGameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.SponsorModels.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("Entities.DBModels.SponsorModels.SponsorLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("SponsorLang");
                });

            modelBuilder.Entity("Entities.DBModels.SponsorModels.SponsorView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppViewEnum")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Sponsor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Sponsor", "AppViewEnum")
                        .IsUnique();

                    b.ToTable("SponsorViews");
                });

            modelBuilder.Entity("Entities.DBModels.StandingsModels.Standings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Against")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Season")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Team")
                        .HasColumnType("int");

                    b.Property<int>("For")
                        .HasColumnType("int");

                    b.Property<int>("GamePlayed")
                        .HasColumnType("int");

                    b.Property<int>("GamesEven")
                        .HasColumnType("int");

                    b.Property<int>("GamesLost")
                        .HasColumnType("int");

                    b.Property<int>("GamesWon")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<double>("Ratio")
                        .HasColumnType("float");

                    b.Property<int>("Strike")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Team");

                    b.HasIndex("Fk_Season", "Fk_Team")
                        .IsUnique();

                    b.ToTable("Standings");
                });

            modelBuilder.Entity("Entities.DBModels.SubscriptionModels.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("ForAction")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Entities.DBModels.SubscriptionModels.SubscriptionLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("SubscriptionLang");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.FormationPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_365_PositionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormationPositions");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.FormationPositionLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("FormationPositionLang");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fk_FormationPosition")
                        .HasColumnType("int");

                    b.Property<int>("Fk_PlayerPosition")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Team")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InExternalTeam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_365_PlayerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_FormationPosition");

                    b.HasIndex("Fk_PlayerPosition");

                    b.HasIndex("Fk_Team");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.PlayerLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("PlayerLang");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.PlayerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_365_PositionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PlayerPositions");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.PlayerPositionLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("PlayerPositionLang");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.PlayerPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BuyPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Player")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Team")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SellPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Player");

                    b.HasIndex("Fk_Team");

                    b.ToTable("PlayerPrices");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Season")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShirtImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShirtStorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_365_TeamId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Season");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.TeamLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("TeamLang");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_User")
                        .HasColumnType("int");

                    b.Property<string>("NotificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_User");

                    b.HasIndex("NotificationToken")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("Fk_User")
                        .HasColumnType("int");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_User");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExternalLogin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "user@mail.com",
                            IsExternalLogin = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Developer",
                            Password = "$2a$11$g1xeTuUF7EGo.M36MLbPCeb8YuouLuLNkipbIketJwE5cp3mP9NkG",
                            UserName = "Developer"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.Verification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("Fk_User")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Fk_User");

                    b.ToTable("Verifications");
                });

            modelBuilder.Entity("Entities.DBModels.AccountModels.Account", b =>
                {
                    b.HasOne("Entities.DBModels.LocationModels.Country", "Country")
                        .WithMany("Accounts")
                        .HasForeignKey("Fk_Country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Team", "FavouriteTeam")
                        .WithMany("AccountFavourites")
                        .HasForeignKey("Fk_FavouriteTeam");

                    b.HasOne("Entities.DBModels.LocationModels.Country", "Nationality")
                        .WithMany("AccountNationalities")
                        .HasForeignKey("Fk_Nationality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.Season", "Season")
                        .WithMany("Accounts")
                        .HasForeignKey("Fk_Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.UserModels.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("Entities.DBModels.AccountModels.Account", "Fk_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("FavouriteTeam");

                    b.Navigation("Nationality");

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.DBModels.AccountModels.AccountSubscription", b =>
                {
                    b.HasOne("Entities.DBModels.AccountModels.Account", "Account")
                        .WithMany("AccountSubscriptions")
                        .HasForeignKey("Fk_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.PromoCodeModels.PromoCode", "PromoCode")
                        .WithMany("AccountSubscriptions")
                        .HasForeignKey("Fk_PromoCode");

                    b.HasOne("Entities.DBModels.SeasonModels.Season", "Season")
                        .WithMany("AccountSubscriptions")
                        .HasForeignKey("Fk_Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SubscriptionModels.Subscription", "Subscription")
                        .WithMany("AccountSubscriptions")
                        .HasForeignKey("Fk_Subscription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PromoCode");

                    b.Navigation("Season");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Entities.DBModels.AccountModels.Payment", b =>
                {
                    b.HasOne("Entities.DBModels.AccountModels.Account", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("Fk_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeam", b =>
                {
                    b.HasOne("Entities.DBModels.AccountModels.Account", "Account")
                        .WithMany("AccountTeams")
                        .HasForeignKey("Fk_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.AccountTeamModels.CommunicationStatus", "CommunicationStatus")
                        .WithMany("AccountTeams")
                        .HasForeignKey("Fk_CommunicationStatus");

                    b.HasOne("Entities.DBModels.TeamModels.Team", "FavouriteTeam")
                        .WithMany()
                        .HasForeignKey("Fk_FavouriteTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.Season", "Season")
                        .WithMany("AccountTeams")
                        .HasForeignKey("Fk_Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CommunicationStatus");

                    b.Navigation("FavouriteTeam");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeamGameWeak", b =>
                {
                    b.HasOne("Entities.DBModels.AccountTeamModels.AccountTeam", "AccountTeam")
                        .WithMany("AccountTeamGameWeaks")
                        .HasForeignKey("Fk_AccountTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.GameWeak", "GameWeak")
                        .WithMany("AccountTeamGameWeaks")
                        .HasForeignKey("Fk_GameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountTeam");

                    b.Navigation("GameWeak");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeamPlayer", b =>
                {
                    b.HasOne("Entities.DBModels.AccountTeamModels.AccountTeam", "AccountTeam")
                        .WithMany("AccountTeamPlayers")
                        .HasForeignKey("Fk_AccountTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Player", "Player")
                        .WithMany("AccountTeamPlayers")
                        .HasForeignKey("Fk_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountTeam");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeamPlayerGameWeak", b =>
                {
                    b.HasOne("Entities.DBModels.AccountTeamModels.AccountTeamPlayer", "AccountTeamPlayer")
                        .WithMany("AccountTeamPlayerGameWeaks")
                        .HasForeignKey("Fk_AccountTeamPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.GameWeak", "GameWeak")
                        .WithMany("AccountTeamPlayerGameWeaks")
                        .HasForeignKey("Fk_GameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.AccountTeamModels.TeamPlayerType", "TeamPlayerType")
                        .WithMany("AccountTeamPlayerGameWeaks")
                        .HasForeignKey("Fk_TeamPlayerType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountTeamPlayer");

                    b.Navigation("GameWeak");

                    b.Navigation("TeamPlayerType");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.TeamPlayerTypeLang", b =>
                {
                    b.HasOne("Entities.DBModels.AccountTeamModels.TeamPlayerType", "Source")
                        .WithOne("TeamPlayerTypeLang")
                        .HasForeignKey("Entities.DBModels.AccountTeamModels.TeamPlayerTypeLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.AppInfoModels.AppAboutLang", b =>
                {
                    b.HasOne("Entities.DBModels.AppInfoModels.AppAbout", "Source")
                        .WithOne("AppAboutLang")
                        .HasForeignKey("Entities.DBModels.AppInfoModels.AppAboutLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.AdministrationRolePremission", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevel", "DashboardAccessLevel")
                        .WithMany("Premissions")
                        .HasForeignKey("Fk_DashboardAccessLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", "DashboardAdministrationRole")
                        .WithMany("Premissions")
                        .HasForeignKey("Fk_DashboardAdministrationRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardView", "DashboardView")
                        .WithMany("Premissions")
                        .HasForeignKey("Fk_DashboardView")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DashboardAccessLevel");

                    b.Navigation("DashboardAdministrationRole");

                    b.Navigation("DashboardView");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevelLang", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevel", "Source")
                        .WithOne("DashboardAccessLevelLang")
                        .HasForeignKey("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevelLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRoleLang", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", "Source")
                        .WithOne("DashboardAdministrationRoleLang")
                        .HasForeignKey("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRoleLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrator", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", "DashboardAdministrationRole")
                        .WithMany("Administrators")
                        .HasForeignKey("Fk_DashboardAdministrationRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.UserModels.User", "User")
                        .WithOne("DashboardAdministrator")
                        .HasForeignKey("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrator", "Fk_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DashboardAdministrationRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardViewLang", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardView", "Source")
                        .WithOne("DashboardViewLang")
                        .HasForeignKey("Entities.DBModels.DashboardAdministrationModels.DashboardViewLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.LocationModels.CountryLang", b =>
                {
                    b.HasOne("Entities.DBModels.LocationModels.Country", "Source")
                        .WithOne("CountryLang")
                        .HasForeignKey("Entities.DBModels.LocationModels.CountryLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.MatchStatisticScore", b =>
                {
                    b.HasOne("Entities.DBModels.MatchStatisticModels.StatisticScore", "StatisticScore")
                        .WithMany("MatchStatisticScores")
                        .HasForeignKey("Fk_StatisticScore")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Team", "Team")
                        .WithMany("MatchStatisticScores")
                        .HasForeignKey("Fk_Team")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.TeamGameWeak", "TeamGameWeak")
                        .WithMany("MatchStatisticScores")
                        .HasForeignKey("Fk_TeamGameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatisticScore");

                    b.Navigation("Team");

                    b.Navigation("TeamGameWeak");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.StatisticCategoryLang", b =>
                {
                    b.HasOne("Entities.DBModels.MatchStatisticModels.StatisticCategory", "Source")
                        .WithOne("StatisticCategoryLang")
                        .HasForeignKey("Entities.DBModels.MatchStatisticModels.StatisticCategoryLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.StatisticScore", b =>
                {
                    b.HasOne("Entities.DBModels.MatchStatisticModels.StatisticCategory", "StatisticCategory")
                        .WithMany("StatisticScores")
                        .HasForeignKey("Fk_StatisticCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatisticCategory");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.StatisticScoreLang", b =>
                {
                    b.HasOne("Entities.DBModels.MatchStatisticModels.StatisticScore", "Source")
                        .WithOne("StatisticScoreLang")
                        .HasForeignKey("Entities.DBModels.MatchStatisticModels.StatisticScoreLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.NewsModels.News", b =>
                {
                    b.HasOne("Entities.DBModels.SeasonModels.GameWeak", "GameWeak")
                        .WithMany("News")
                        .HasForeignKey("Fk_GameWeak");

                    b.HasOne("Entities.DBModels.SeasonModels.Season", "Season")
                        .WithMany()
                        .HasForeignKey("Fk_Season");

                    b.Navigation("GameWeak");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Entities.DBModels.NewsModels.NewsAttachment", b =>
                {
                    b.HasOne("Entities.DBModels.NewsModels.News", "News")
                        .WithMany("NewsAttachments")
                        .HasForeignKey("Fk_News")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("Entities.DBModels.NewsModels.NewsLang", b =>
                {
                    b.HasOne("Entities.DBModels.NewsModels.News", "Source")
                        .WithOne("NewsLang")
                        .HasForeignKey("Entities.DBModels.NewsModels.NewsLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.NotificationModels.NotificationLang", b =>
                {
                    b.HasOne("Entities.DBModels.NotificationModels.Notification", "Source")
                        .WithOne("NotificationLang")
                        .HasForeignKey("Entities.DBModels.NotificationModels.NotificationLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.MarkLang", b =>
                {
                    b.HasOne("Entities.DBModels.PlayerMarkModels.Mark", "Source")
                        .WithOne("MarkLang")
                        .HasForeignKey("Entities.DBModels.PlayerMarkModels.MarkLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMark", b =>
                {
                    b.HasOne("Entities.DBModels.PlayerMarkModels.Mark", "Mark")
                        .WithMany("PlayerMarks")
                        .HasForeignKey("Fk_Mark")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Player", "Player")
                        .WithMany("PlayerMarks")
                        .HasForeignKey("Fk_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMarkGameWeak", b =>
                {
                    b.HasOne("Entities.DBModels.SeasonModels.GameWeak", "GameWeak")
                        .WithMany("PlayerMarkGameWeaks")
                        .HasForeignKey("Fk_GameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.PlayerMarkModels.PlayerMark", "PlayerMark")
                        .WithMany()
                        .HasForeignKey("Fk_PlayerMark")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameWeak");

                    b.Navigation("PlayerMark");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMarkGameWeakScore", b =>
                {
                    b.HasOne("Entities.DBModels.PlayerScoreModels.PlayerGameWeakScore", "PlayerGameWeakScore")
                        .WithMany("PlayerMarkGameWeakScores")
                        .HasForeignKey("Fk_PlayerGameWeakScore")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.PlayerMarkModels.PlayerMark", "PlayerMark")
                        .WithMany("PlayerMarkGameWeakScores")
                        .HasForeignKey("Fk_PlayerMark")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerGameWeakScore");

                    b.Navigation("PlayerMark");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMarkReasonMatch", b =>
                {
                    b.HasOne("Entities.DBModels.PlayerMarkModels.PlayerMark", "PlayerMark")
                        .WithMany("PlayerMarkReasonMatches")
                        .HasForeignKey("Fk_PlayerMark")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.TeamGameWeak", "TeamGameWeak")
                        .WithMany()
                        .HasForeignKey("Fk_TeamGameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerMark");

                    b.Navigation("TeamGameWeak");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMarkTeamGameWeak", b =>
                {
                    b.HasOne("Entities.DBModels.PlayerMarkModels.PlayerMark", "PlayerMark")
                        .WithMany("PlayerMarkTeamGameWeaks")
                        .HasForeignKey("Fk_PlayerMark")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.TeamGameWeak", "TeamGameWeak")
                        .WithMany("PlayerMarkTeamGameWeaks")
                        .HasForeignKey("Fk_TeamGameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerMark");

                    b.Navigation("TeamGameWeak");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.PlayerGameWeak", b =>
                {
                    b.HasOne("Entities.DBModels.TeamModels.Player", "Player")
                        .WithMany("PlayerGameWeaks")
                        .HasForeignKey("Fk_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.TeamGameWeak", "TeamGameWeak")
                        .WithMany("PlayerGameWeaks")
                        .HasForeignKey("Fk_TeamGameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TeamGameWeak");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.PlayerGameWeakScore", b =>
                {
                    b.HasOne("Entities.DBModels.PlayerScoreModels.PlayerGameWeak", "PlayerGameWeak")
                        .WithMany("PlayerGameWeakScores")
                        .HasForeignKey("Fk_PlayerGameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.PlayerScoreModels.ScoreType", "ScoreType")
                        .WithMany("PlayerGameWeakScores")
                        .HasForeignKey("Fk_ScoreType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerGameWeak");

                    b.Navigation("ScoreType");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.ScoreTypeLang", b =>
                {
                    b.HasOne("Entities.DBModels.PlayerScoreModels.ScoreType", "Source")
                        .WithOne("ScoreTypeLang")
                        .HasForeignKey("Entities.DBModels.PlayerScoreModels.ScoreTypeLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerStateModels.PlayerGameWeakScoreState", b =>
                {
                    b.HasOne("Entities.DBModels.SeasonModels.GameWeak", "GameWeak")
                        .WithMany("PlayerGameWeakScoreStates")
                        .HasForeignKey("Fk_GameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Player", "Player")
                        .WithMany("PlayerGameWeakScoreStates")
                        .HasForeignKey("Fk_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.PlayerStateModels.ScoreState", "ScoreState")
                        .WithMany("PlayerGameWeakScoreStates")
                        .HasForeignKey("Fk_ScoreState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameWeak");

                    b.Navigation("Player");

                    b.Navigation("ScoreState");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerStateModels.PlayerSeasonScoreState", b =>
                {
                    b.HasOne("Entities.DBModels.TeamModels.Player", "Player")
                        .WithMany("PlayerSeasonScoreStates")
                        .HasForeignKey("Fk_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.PlayerStateModels.ScoreState", "ScoreState")
                        .WithMany("PlayerSeasonScoreStates")
                        .HasForeignKey("Fk_ScoreState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.Season", "Season")
                        .WithMany("PlayerSeasonScoreStates")
                        .HasForeignKey("Fk_Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("ScoreState");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerStateModels.ScoreStateLang", b =>
                {
                    b.HasOne("Entities.DBModels.PlayerStateModels.ScoreState", "Source")
                        .WithOne("ScoreStateLang")
                        .HasForeignKey("Entities.DBModels.PlayerStateModels.ScoreStateLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.PlayersTransfersModels.PlayerTransfer", b =>
                {
                    b.HasOne("Entities.DBModels.AccountTeamModels.AccountTeam", "AccountTeam")
                        .WithMany("PlayerTransfers")
                        .HasForeignKey("Fk_AccountTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.GameWeak", "GameWeak")
                        .WithMany("PlayerTransfers")
                        .HasForeignKey("Fk_GameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Player", "Player")
                        .WithMany("PlayerTransfers")
                        .HasForeignKey("Fk_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountTeam");

                    b.Navigation("GameWeak");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Entities.DBModels.PrivateLeagueModels.PrivateLeague", b =>
                {
                    b.HasOne("Entities.DBModels.SeasonModels.GameWeak", "GameWeak")
                        .WithMany()
                        .HasForeignKey("Fk_GameWeak");

                    b.Navigation("GameWeak");
                });

            modelBuilder.Entity("Entities.DBModels.PrivateLeagueModels.PrivateLeagueMember", b =>
                {
                    b.HasOne("Entities.DBModels.AccountModels.Account", "Account")
                        .WithMany("PrivateLeagueMembers")
                        .HasForeignKey("Fk_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.PrivateLeagueModels.PrivateLeague", "PrivateLeague")
                        .WithMany("PrivateLeagueMembers")
                        .HasForeignKey("Fk_PrivateLeague")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PrivateLeague");
                });

            modelBuilder.Entity("Entities.DBModels.PromoCodeModels.PromoCodeLang", b =>
                {
                    b.HasOne("Entities.DBModels.PromoCodeModels.PromoCode", "Source")
                        .WithOne("PromoCodeLang")
                        .HasForeignKey("Entities.DBModels.PromoCodeModels.PromoCodeLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.PromoCodeModels.PromoCodeSubscription", b =>
                {
                    b.HasOne("Entities.DBModels.PromoCodeModels.PromoCode", "PromoCode")
                        .WithMany("PromoCodeSubscriptions")
                        .HasForeignKey("Fk_PromoCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SubscriptionModels.Subscription", "Subscription")
                        .WithMany("PromoCodeSubscriptions")
                        .HasForeignKey("Fk_Subscription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromoCode");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.GameWeak", b =>
                {
                    b.HasOne("Entities.DBModels.SeasonModels.Season", "Season")
                        .WithMany("GameWeaks")
                        .HasForeignKey("Fk_Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.GameWeakLang", b =>
                {
                    b.HasOne("Entities.DBModels.SeasonModels.GameWeak", "Source")
                        .WithOne("GameWeakLang")
                        .HasForeignKey("Entities.DBModels.SeasonModels.GameWeakLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.SeasonLang", b =>
                {
                    b.HasOne("Entities.DBModels.SeasonModels.Season", "Source")
                        .WithOne("SeasonLang")
                        .HasForeignKey("Entities.DBModels.SeasonModels.SeasonLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.TeamGameWeak", b =>
                {
                    b.HasOne("Entities.DBModels.TeamModels.Team", "Away")
                        .WithMany("AwayGameWeaks")
                        .HasForeignKey("Fk_Away")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.SeasonModels.GameWeak", "GameWeak")
                        .WithMany("TeamGameWeaks")
                        .HasForeignKey("Fk_GameWeak")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Team", "Home")
                        .WithMany("HomeGameWeaks")
                        .HasForeignKey("Fk_Home")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Away");

                    b.Navigation("GameWeak");

                    b.Navigation("Home");
                });

            modelBuilder.Entity("Entities.DBModels.SponsorModels.SponsorLang", b =>
                {
                    b.HasOne("Entities.DBModels.SponsorModels.Sponsor", "Source")
                        .WithOne("SponsorLang")
                        .HasForeignKey("Entities.DBModels.SponsorModels.SponsorLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.SponsorModels.SponsorView", b =>
                {
                    b.HasOne("Entities.DBModels.SponsorModels.Sponsor", "Sponsor")
                        .WithMany("SponsorViews")
                        .HasForeignKey("Fk_Sponsor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("Entities.DBModels.StandingsModels.Standings", b =>
                {
                    b.HasOne("Entities.DBModels.SeasonModels.Season", "Season")
                        .WithMany("Standings")
                        .HasForeignKey("Fk_Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Team", "Team")
                        .WithMany("Standings")
                        .HasForeignKey("Fk_Team")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Entities.DBModels.SubscriptionModels.SubscriptionLang", b =>
                {
                    b.HasOne("Entities.DBModels.SubscriptionModels.Subscription", "Source")
                        .WithOne("SubscriptionLang")
                        .HasForeignKey("Entities.DBModels.SubscriptionModels.SubscriptionLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.FormationPositionLang", b =>
                {
                    b.HasOne("Entities.DBModels.TeamModels.FormationPosition", "Source")
                        .WithOne("FormationPositionLang")
                        .HasForeignKey("Entities.DBModels.TeamModels.FormationPositionLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.Player", b =>
                {
                    b.HasOne("Entities.DBModels.TeamModels.FormationPosition", "FormationPosition")
                        .WithMany("Players")
                        .HasForeignKey("Fk_FormationPosition");

                    b.HasOne("Entities.DBModels.TeamModels.PlayerPosition", "PlayerPosition")
                        .WithMany("Players")
                        .HasForeignKey("Fk_PlayerPosition")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("Fk_Team")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormationPosition");

                    b.Navigation("PlayerPosition");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.PlayerLang", b =>
                {
                    b.HasOne("Entities.DBModels.TeamModels.Player", "Source")
                        .WithOne("PlayerLang")
                        .HasForeignKey("Entities.DBModels.TeamModels.PlayerLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.PlayerPositionLang", b =>
                {
                    b.HasOne("Entities.DBModels.TeamModels.PlayerPosition", "Source")
                        .WithOne("PlayerPositionLang")
                        .HasForeignKey("Entities.DBModels.TeamModels.PlayerPositionLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.PlayerPrice", b =>
                {
                    b.HasOne("Entities.DBModels.TeamModels.Player", "Player")
                        .WithMany("PlayerPrices")
                        .HasForeignKey("Fk_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.TeamModels.Team", "Team")
                        .WithMany("PlayerPrices")
                        .HasForeignKey("Fk_Team")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.Team", b =>
                {
                    b.HasOne("Entities.DBModels.SeasonModels.Season", "Season")
                        .WithMany("Teams")
                        .HasForeignKey("Fk_Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.TeamLang", b =>
                {
                    b.HasOne("Entities.DBModels.TeamModels.Team", "Source")
                        .WithOne("TeamLang")
                        .HasForeignKey("Entities.DBModels.TeamModels.TeamLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.Device", b =>
                {
                    b.HasOne("Entities.DBModels.UserModels.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("Fk_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.RefreshToken", b =>
                {
                    b.HasOne("Entities.DBModels.UserModels.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("Fk_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.Verification", b =>
                {
                    b.HasOne("Entities.DBModels.UserModels.User", "User")
                        .WithMany("Verifications")
                        .HasForeignKey("Fk_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.DBModels.AccountModels.Account", b =>
                {
                    b.Navigation("AccountSubscriptions");

                    b.Navigation("AccountTeams");

                    b.Navigation("Payments");

                    b.Navigation("PrivateLeagueMembers");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeam", b =>
                {
                    b.Navigation("AccountTeamGameWeaks");

                    b.Navigation("AccountTeamPlayers");

                    b.Navigation("PlayerTransfers");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.AccountTeamPlayer", b =>
                {
                    b.Navigation("AccountTeamPlayerGameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.CommunicationStatus", b =>
                {
                    b.Navigation("AccountTeams");
                });

            modelBuilder.Entity("Entities.DBModels.AccountTeamModels.TeamPlayerType", b =>
                {
                    b.Navigation("AccountTeamPlayerGameWeaks");

                    b.Navigation("TeamPlayerTypeLang");
                });

            modelBuilder.Entity("Entities.DBModels.AppInfoModels.AppAbout", b =>
                {
                    b.Navigation("AppAboutLang");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevel", b =>
                {
                    b.Navigation("DashboardAccessLevelLang");

                    b.Navigation("Premissions");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("DashboardAdministrationRoleLang");

                    b.Navigation("Premissions");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardView", b =>
                {
                    b.Navigation("DashboardViewLang");

                    b.Navigation("Premissions");
                });

            modelBuilder.Entity("Entities.DBModels.LocationModels.Country", b =>
                {
                    b.Navigation("AccountNationalities");

                    b.Navigation("Accounts");

                    b.Navigation("CountryLang");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.StatisticCategory", b =>
                {
                    b.Navigation("StatisticCategoryLang");

                    b.Navigation("StatisticScores");
                });

            modelBuilder.Entity("Entities.DBModels.MatchStatisticModels.StatisticScore", b =>
                {
                    b.Navigation("MatchStatisticScores");

                    b.Navigation("StatisticScoreLang");
                });

            modelBuilder.Entity("Entities.DBModels.NewsModels.News", b =>
                {
                    b.Navigation("NewsAttachments");

                    b.Navigation("NewsLang");
                });

            modelBuilder.Entity("Entities.DBModels.NotificationModels.Notification", b =>
                {
                    b.Navigation("NotificationLang");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.Mark", b =>
                {
                    b.Navigation("MarkLang");

                    b.Navigation("PlayerMarks");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerMarkModels.PlayerMark", b =>
                {
                    b.Navigation("PlayerMarkGameWeakScores");

                    b.Navigation("PlayerMarkReasonMatches");

                    b.Navigation("PlayerMarkTeamGameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.PlayerGameWeak", b =>
                {
                    b.Navigation("PlayerGameWeakScores");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.PlayerGameWeakScore", b =>
                {
                    b.Navigation("PlayerMarkGameWeakScores");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerScoreModels.ScoreType", b =>
                {
                    b.Navigation("PlayerGameWeakScores");

                    b.Navigation("ScoreTypeLang");
                });

            modelBuilder.Entity("Entities.DBModels.PlayerStateModels.ScoreState", b =>
                {
                    b.Navigation("PlayerGameWeakScoreStates");

                    b.Navigation("PlayerSeasonScoreStates");

                    b.Navigation("ScoreStateLang");
                });

            modelBuilder.Entity("Entities.DBModels.PrivateLeagueModels.PrivateLeague", b =>
                {
                    b.Navigation("PrivateLeagueMembers");
                });

            modelBuilder.Entity("Entities.DBModels.PromoCodeModels.PromoCode", b =>
                {
                    b.Navigation("AccountSubscriptions");

                    b.Navigation("PromoCodeLang");

                    b.Navigation("PromoCodeSubscriptions");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.GameWeak", b =>
                {
                    b.Navigation("AccountTeamGameWeaks");

                    b.Navigation("AccountTeamPlayerGameWeaks");

                    b.Navigation("GameWeakLang");

                    b.Navigation("News");

                    b.Navigation("PlayerGameWeakScoreStates");

                    b.Navigation("PlayerMarkGameWeaks");

                    b.Navigation("PlayerTransfers");

                    b.Navigation("TeamGameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.Season", b =>
                {
                    b.Navigation("AccountSubscriptions");

                    b.Navigation("AccountTeams");

                    b.Navigation("Accounts");

                    b.Navigation("GameWeaks");

                    b.Navigation("PlayerSeasonScoreStates");

                    b.Navigation("SeasonLang");

                    b.Navigation("Standings");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Entities.DBModels.SeasonModels.TeamGameWeak", b =>
                {
                    b.Navigation("MatchStatisticScores");

                    b.Navigation("PlayerGameWeaks");

                    b.Navigation("PlayerMarkTeamGameWeaks");
                });

            modelBuilder.Entity("Entities.DBModels.SponsorModels.Sponsor", b =>
                {
                    b.Navigation("SponsorLang");

                    b.Navigation("SponsorViews");
                });

            modelBuilder.Entity("Entities.DBModels.SubscriptionModels.Subscription", b =>
                {
                    b.Navigation("AccountSubscriptions");

                    b.Navigation("PromoCodeSubscriptions");

                    b.Navigation("SubscriptionLang");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.FormationPosition", b =>
                {
                    b.Navigation("FormationPositionLang");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.Player", b =>
                {
                    b.Navigation("AccountTeamPlayers");

                    b.Navigation("PlayerGameWeakScoreStates");

                    b.Navigation("PlayerGameWeaks");

                    b.Navigation("PlayerLang");

                    b.Navigation("PlayerMarks");

                    b.Navigation("PlayerPrices");

                    b.Navigation("PlayerSeasonScoreStates");

                    b.Navigation("PlayerTransfers");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.PlayerPosition", b =>
                {
                    b.Navigation("PlayerPositionLang");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Entities.DBModels.TeamModels.Team", b =>
                {
                    b.Navigation("AccountFavourites");

                    b.Navigation("AwayGameWeaks");

                    b.Navigation("HomeGameWeaks");

                    b.Navigation("MatchStatisticScores");

                    b.Navigation("PlayerPrices");

                    b.Navigation("Players");

                    b.Navigation("Standings");

                    b.Navigation("TeamLang");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("DashboardAdministrator");

                    b.Navigation("Devices");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Verifications");
                });
#pragma warning restore 612, 618
        }
    }
}
